<?php

namespace App\Filament\Resources\ProposalResource\Pages;

use Filament\Schemas\Components\Tabs\Tab;
use Filament\Tables\Table;
use Filament\Tables\Grouping\Group;
use Filament\Tables\Columns\TextColumn;
use Filament\Actions\Action;
use Filament\Support\Enums\Width;
use Filament\Schemas\Schema;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\ToggleButtons;
use App\Filament\Actions\Call;
use App\Filament\Resources\PersonResource;
use App\Filament\Resources\ProposalResource;
use App\Models\Person;
use App\Models\Proposal;
use Filament\Forms;
use Filament\Resources\Pages\ManageRelatedRecords;
use Filament\Support\Colors\Color;
use Filament\Tables;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\Relation;
use Livewire\Attributes\Locked;

class Family extends ManageRelatedRecords
{
    protected static string $resource = ProposalResource::class;

    protected static string $relationship = 'family';

    protected static string | \BackedEnum | null $navigationIcon = 'heroicon-o-users';

    protected static ?string $title = 'משפחה';

    protected static ?string $navigationLabel = 'משפחה';

    #[Locked]
    public ?string $side = null;

    public function mount(int|string $record): void
    {
        $arguments = func_get_args();

        $this->side = $arguments[1] ?? $this->side;

        parent::mount($record); // TODO: Change the autogenerated stub

        $this->getOwnerRecord()->loadMissing('contacts');
    }

    public function getRelationship(): Relation|Builder
    {
        $relationship = $this->getRelationshipByTabName($this->activeTab);

        if(! $relationship) {
            abort(404, 'Tab not found');
        }

        return $relationship;
    }

    public function unionDirectsWithInLaws(?\App\Models\Family $family = null, ?bool $skipOnLaw = false)
    {
        if(! $family) {
            return null;
        }

        if ($skipOnLaw) {
            return $family->children();
        }

        return $family->children()->union($family->childrenInLaw());
    }

    public function getRelationshipByTabName($name, ?bool $forceReturnRelationship = true, ?bool $skipOnLaw = false): Relation|Builder|null
    {
        $side = $this->side;

        $return = match ($name) {
            'father_siblings' => $this->unionDirectsWithInLaws($this->getOwnerRecord()->{$side}?->father?->parentsFamily, $skipOnLaw),
            'mother_siblings' => $this->unionDirectsWithInLaws($this->getOwnerRecord()->{$side}?->mother?->parentsFamily, $skipOnLaw),
            'parents' => $this->getOwnerRecord()->{$side}?->parentsFamily?->people(),
            'siblings' => $this->unionDirectsWithInLaws($this->getOwnerRecord()->{$side}?->parentsFamily, $skipOnLaw),
            'grandparents' => $this->getOwnerRecord()->{$side}?->grandparents(),
            default => null
        };

        if ($forceReturnRelationship && ! $return instanceof Relation && ! $return instanceof Builder) {
            $return = $this->getOwnerRecord()->{$side}?->parentsFamily?->children();
        }

        return $return;
    }

    public function getTabs(): array
    {
        $counts = [
            'siblings' => $this->getRelationshipByTabName('siblings', false, true)?->count() ?? null,
            'parents' => $this->getRelationshipByTabName('parents', false, true)?->count() ?? null,
            'grandparents' => $this->getRelationshipByTabName('grandparents', false, true)?->count() ?? null,
            'father_siblings' => $this->getRelationshipByTabName('father_siblings', false, true)?->count() ?? null,
            'mother_siblings' => $this->getRelationshipByTabName('mother_siblings', false, true)?->count() ?? null,
        ];

        $tabs = [];

        foreach ($counts as $tab => $count) {
            $tabs[$tab] = Tab::make(match ($tab) {
                'siblings' => 'אחים ואחיות',
                'parents' => 'הורים',
                'grandparents' => 'סבים',
                'father_siblings' => 'אחי אב',
                'mother_siblings' => 'אחי אם',
                default => '',
            })->badge($count ?? null);
        }

        return $tabs;
    }

    public function table(Table $table): Table
    {
        /** @var Proposal $proposal */
        $proposal = $this->getOwnerRecord();

        return static::familyTable($table, $proposal, $this->side)
            ->defaultGroup(
                Group::make('current_family_id')
                    ->label('')
                    ->getTitleFromRecordUsing(fn (Person $person) => $person->family->husband->full_name ?? 'לא נשואים')
            )
            ->defaultSort(
                fn(Builder $query) => $query->orderBy('born_at')
            )
            ->query(function() {
                //TODO: Fix this to normal query
                return Person::fromSub($this->getRelationship()->getQuery(), 'people');
            })
            ->modifyQueryUsing(fn (Builder $query) => $this->modifyQueryTable($query));
    }

    static public function familyTable(Table $table, $proposal, $side, ?bool $withChildren = true): Table
    {
        $isProposal = $proposal instanceof Proposal;

        return $table
            ->columns([
                Person::nameColumn(),
                ...Person::baseColumns(),
                Person::childrenColumn($isProposal ? $proposal : null, $side),
                TextColumn::make('age')
                    ->label('גיל')
                    ->badge()
                    ->alignCenter()
                    ->tooltip(fn (Person $person) => $person->born_at ? $person->born_at->hebcal()->hebrewDate(false, true) : null)
                    ->color(fn (Person $person) => $person->gender === 'B' ? Color::Blue : 'danger')
                    ->prefix(fn (Person $person) => $person->gender === 'B' ? 'בן ' : 'בת '),
            ])
            ->recordActions(static::getTableFamilyActions($isProposal ? $proposal : null, $side));
    }

    static public function getTableFamilyActions(?Proposal $proposal = null, ?string $side = null): array
    {
        $proposalActions = $proposal ? [
            Call::tableAction($proposal, $side),
            Action::make('add-contact')
                ->label('הוסף לאנשי קשר')
                ->tooltip('הוסף לאנשי קשר')
                ->iconButton()
                ->modalWidth(Width::Small)
                ->visible(fn (Person $person) => ! $proposal->contacts->where('id', $person->id)->count())
                ->schema(fn (Schema $schema) => $schema
                    ->components([
                        TextInput::make('type_contact')
                            ->label('סוג איש קשר')
                            ->placeholder('למשל: אח שאחראי על השידוכים...')
                            ->required(),
                        ToggleButtons::make('create_auto')
                            ->label('יצירת איש קשר אוטומטית')
                            ->boolean()
                            ->grouped()
                            ->options([
                                true => 'כן',
                                false => 'לא',
                            ])
                            ->helperText('אם תסמן "כן" איש הקשר יווצר באופן אוטו\' עם כל הצעה חדשה של הבחור/ה.')
                            ->extraAttributes(['class' => '!w-full'])
                            ->maxWidth('full')
                            ->default(false),
                    ]),
                )
                ->action(function (Person $person, array $data, Action $action) use ($side, $proposal) {
                    if ($data['create_auto'] ?? false) {
                        $proposal->{$side}->addAutoContact($person, $data['type_contact']);
                    }

                    $proposal->contacts()->attach([
                        $person->id => [
                            'type' => $data['type_contact'],
                            'side' => $side,
                        ],
                    ]);

                    $action->success();
                })
                ->color('gray')
                ->icon('iconsax-bul-user-add')
        ]: [];

        return array_merge($proposalActions, [
            Action::make('show')
                ->label('הצג')
                ->tooltip('הצג')
                ->iconButton()
                ->color('gray')
                ->icon('iconsax-two-eye')
                ->url(fn (Person $person) => PersonResource::getUrl('edit', ['record' => $person])),
        ]);
    }


    public function modifyQueryTable(Builder $query): Builder|Person
    {
//        if (! $this->getRelationshipByTabName($this->activeTab, false)) {
//            $query = match ($this->activeTab) {
//                'grandparents' => Person::whereIn('id',
//                    $this->getOwnerRecord()->{$this->side}?->parentsFamily?->people->load('parentsFamily.people')
//                        ->pluck('parentsFamily.people.*.id')
//                        ->flatten()
//                        ->filter()
//                        ->toArray(),
//                ),
//                default => Person::where('id', 0),
//            };
//        }

        $query->with([
            'family',
            'spouse.father',
            'families' => fn ($query) => $query->withCount('children'),
        ]);

        return $query;
    }
}
