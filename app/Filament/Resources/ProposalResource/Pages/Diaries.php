<?php

namespace App\Filament\Resources\ProposalResource\Pages;

use App\Filament\Resources\ProposalResource;
use App\Filament\Resources\ProposalResource\Traits\DiariesComponents;
use App\Http\Controllers\WebhookGisController;
use App\Models\Call;
use App\Models\Person;
use App\Models\Proposal;
use App\Models\Task;
use Filament\Actions\Action;
use Filament\Resources\Pages\ManageRelatedRecords;
use Illuminate\Database\Eloquent\Builder;

class Diaries extends ManageRelatedRecords
{
    use DiariesComponents;

    protected static string $resource = ProposalResource::class;

    protected static string $relationship = 'diaries';

    protected static ?string $navigationIcon = 'heroicon-o-list-bullet';

    protected static ?string $title = 'תיעוד';

    public function mount(int|string $record): void
    {
        $arguments = func_get_args();

        $this->side = $arguments[1] ?? $this->side;

        parent::mount($record); // TODO: Change the autogenerated stub
    }

    protected function getActions(): array
    {
        return [
            Action::make('create-diary')
                ->label('הוסף תיעוד')
                ->form(fn ($form) => $this->form($form))
                ->action(function (Action $action, $data) {
                    if (static::createNewDiary($data, $this->getOwnerRecord(), $this->side)) {
                        $action->success();

                        return;
                    }

                    $action->failure();
                }),
        ];
    }

    public function modifyQueryTable(Builder $query): Builder|Person
    {
        return $query;
    }

    public static function createNewDiary($data, Proposal $record, $side)
    {
        $data['data'] = array_merge(
            [
                'date' => now()->format('Y-m-d H:i:s'),
            ],
            $data['data']
        );

        $call = null;

        if(data_get($data, 'data.call_id') || data_get($data, 'call_id')) {
            if($call = Call::query()
                ->find(data_get($data, 'data.call_id') ?: data_get($data, 'call_id'))
            ) {
                $data['data'] = array_merge($data['data'], [
                    'call_id' => $call->id,
                    'duration' => $call->duration,
                    'file' => $call->audio_url,
                ]);
            }
        }

        return \DB::transaction(function () use ($data, $record, $side, $call) {

            $newTasks = collect(data_get($data, 'tasks', []))->map(fn ($task) => [
                'user_id' => auth()->id(),
                'description' => $task['description'],
                'due_date' => $task['due_date'],
                'priority' => $task['priority'],
                'type' => $task['contact_to'] ? 'contact' : 'regular',
                'data' => [
                    'contact_to' => $task['contact_to'] ?? null,
                ]
            ])->toArray();

            $completedTask = data_get($data, 'completed_tasks', []);

            $data = \Arr::except($data, ['tasks', 'completed_tasks']);

            $data['data']['tasks'] = $record->tasks()->createMany($newTasks);

            $currentStatuses = [
                'proposal' => $record->status,
                'guy' => $record->status_guy,
                'girl' => $record->status_girl,
            ];

            $data['data']['statuses'] = array_merge(
                $currentStatuses,
                $data['statuses'] ?? []
            );

            $diary = $record->diaries()
                ->create(array_merge($data, ($side ? [
                    'model_type' => Person::class,
                    'model_id' => $record->{$side}->id,
                ] : []), [
                    'created_by' => auth()->id(),
                ]));

            $completedTask = count($completedTask)
                ? Task::findMany($completedTask)->mapWithKeys(function ($task) use ($diary) {
                    return [$task->id => $task->completed($diary)];
                })->filter()->keys()->toArray()
                : [];

            $diary->update([
                'data' => array_merge($diary->data, [
                    'completed_tasks' => $completedTask,
                ]),
            ]);

            $call && $call->finished_at && WebhookGisController::updateAllDiaries($call);

            $changeNextDates = $data['change_next_dates'] ?? false;

            $proposalAttributes = array_merge([
                'status' => $data['statuses']['proposal'],
            ], $side ? [
                "status_$side" => $data['statuses'][$side],
                "{$side}_next_time" => $data['next_date'],
            ] : [], ($changeNextDates && ! $side) ? [
                'girl_next_time' => $data['next_date'],
                'guy_next_time' => $data['next_date'],
            ] : []);

            $record->update($proposalAttributes);

            $record->people->each->update([
                'last_diary_id' => $diary->id,
            ]);
        });
    }
}
